/* This code is for the FEH motors Lab */
/* It uses the fencdr2.icb to count transitions */
/* The code is used to find the RPM of a motor */

#use fencdr2.icb

void main()
{
    int a, x, y, stop , deltacount, select, opp;
    float b, begin, end, Time, RPM;
    
    /* Tell the user to use the knob to select a function */
    /* the lower turns the motor on to lower the string*/
    /* the raise turns the motor on to raise the string*/
    /* the test directs the user to the test portion of the code*/
    /* pressing start selects the operation*/
    while(1==1)
      {
        printf("\nUse knob to select setting.\n");  
        sleep(1.0);
        while(start_button()!=1)
          {
            sleep(0.1);  /* allows for the display of the inital text*/
            select=knob();
            
            /*if stucture to indicate what operation to run*/
            if(select<=80)
              {
                printf("Current operation is lower\n");
                opp=1;}
            else if(select<=160 && select>=80)
              {
                printf("Current operation is raise\n");
                opp=2;
            }
            else
            {
                printf("Current operation is test\n");
                opp=3;
            }
            
        }
        
        /*if stucture to run selected opperation*/
        if (opp==1)
          {
            /*turns on motor to negative and indcates opperation*/
            printf("motor lowered\n");
            motor(1,-100);
            /*waits until the desired rotation is completed then turns off motor*/
            encoder2_counts=0;
            while(encoder2_counts<125);
            motor(1,0);
            
        }
        else if (opp==2)
          {
            /*turns on motor to possitive and indcates opperation*/
            printf("motor raised\n");
            motor(1,100);
            /*waits until the desired rotation is completed then turns off motor*/
            encoder2_counts=0;
            while(encoder2_counts<125);
            motor(1,0);
            
        }
        else if (opp=3)
          {
            /*initialize or resets values*/
            end=0.0;
            begin=0.0;
            Time=0.0;
            reset_system_time();
            /*Turns on motor possitive and initiats time and encoder counts*/
            motor(1,100);
            begin=seconds();
            encoder2_counts=0;
            /*waits until the desired rotation is completed then turns off motor*/
            while(encoder2_counts<325)
              {
                /*determins the rpm for a small section of test and displays it*/
                x=encoder2_counts; 
                sleep(0.5); 
                y=encoder2_counts; 
                deltacount=y-x; 
                RPM=(((float)deltacount/(200.))/.5)*60.; /*(counts that occur)/(changes per revolution)/(time(sec))*60sec*/
                printf("RPM=%f %d\n",RPM, y);
                
            }
            /*turn off motors*/
            ao();
            /*calculate the avearge RPM and display*/
            end=seconds();
            Time=end-begin;
            a=encoder2_counts; 
            b=(float) a / 200.; 
            RPM = b / Time * 60.; 
            printf("t=%f r=%f RPM=%f\n",Time,b,RPM);
            /*leaves display on until stop button is pressed*/
            while(stop_button()!=1);
            
        }
        
        
    }
}
