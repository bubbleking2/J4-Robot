/*=================================================================================================*\
|* Arctan.ic                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* File #2                                                                                         *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Contains a function that quickly computes inverse tangents.                            *|
\*=================================================================================================*/

/*=================================================================================================*\
|* Constants                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* ARCTAN | This constant's definition is proof that the file is being used.                       *|
\*=================================================================================================*/

#define ARCTAN 1

/*=================================================================================================*\
|* Functions                                                                                       *|
\*=================================================================================================*/

/*-------------------------------------------------------------------------------------------------*\
|* int Arctan(int x, int y)                                                                        *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #20                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: This function computes an inverse tangent given two arguments.                         *|
|*-------------------------------------------------------------------------------------------------*|
|* Returns: The rounded inverse inverse tangent of x/y.                                            *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* int x | The side of a triangle opposite of the angle being computed.                            *|
|*-------+-----------------------------------------------------------------------------------------*|
|* int y | The side of the tringle adjacent to the angle being computed.                           *|
\*-------------------------------------------------------------------------------------------------*/

int Arctan(int x, int y)
{
    float ratio;
    int sign;
    
    #ifdef TEST_LOG
      {
        LogEvent(201);
    }
    #endif
    
    if (y == 0)
      {
        if(x > 0)
          {
            #ifdef TEST_LOG
              {
                LogEvent(310);
            }
            #endif
            return 90;
        }
        else
          {
            #ifdef TEST_LOG
              {
                LogEvent(310);
            }
            #endif
            return -90;
        }
    }
    
    ratio = (float)x / (float)y;
    
    if (ratio >= 0.)
      {
        sign = 1;
    }
    else
      {
        sign = -1;
        ratio = -ratio;
    }
    
    #ifdef TEST_LOG
      {
        LogEvent(200);
    }
    #endif
    
    if (ratio <= 0.008726867)
      return 0 * sign;
    if (ratio <= 0.026185921)
      return 1 * sign;
    if (ratio <= 0.043660942)
      return 2 * sign;
    if (ratio <= 0.061162620)
      return 3 * sign;
    if (ratio <= 0.078701706)
      return 4 * sign;
    if (ratio <= 0.096289048)
      return 5 * sign;
    if (ratio <= 0.113935608)
      return 6 * sign;
    if (ratio <= 0.131652497)
      return 7 * sign;
    if (ratio <= 0.149451001)
      return 8 * sign;
    if (ratio <= 0.167342608)
      return 9 * sign;
    if (ratio <= 0.185339044)
      return 10 * sign;
    if (ratio <= 0.203452299)
      return 11 * sign;
    if (ratio <= 0.221694662)
      return 12 * sign;
    if (ratio <= 0.240078758)
      return 13 * sign;
    if (ratio <= 0.258617584)
      return 14 * sign;
    if (ratio <= 0.277324543)
      return 15 * sign;
    if (ratio <= 0.296213494)
      return 16 * sign;
    if (ratio <= 0.315298788)
      return 17 * sign;
    if (ratio <= 0.334595319)
      return 18 * sign;
    if (ratio <= 0.354118572)
      return 19 * sign;
    if (ratio <= 0.373884679)
      return 20 * sign;
    if (ratio <= 0.393910475)
      return 21 * sign;
    if (ratio <= 0.414213561)
      return 22 * sign;
    if (ratio <= 0.434812374)
      return 23 * sign;
    if (ratio <= 0.455726254)
      return 24 * sign;
    if (ratio <= 0.476975532)
      return 25 * sign;
    if (ratio <= 0.498581607)
      return 26 * sign;
    if (ratio <= 0.520567049)
      return 27 * sign;
    if (ratio <= 0.542955698)
      return 28 * sign;
    if (ratio <= 0.565772777)
      return 29 * sign;
    if (ratio <= 0.589045015)
      return 30 * sign;
    if (ratio <= 0.612800787)
      return 31 * sign;
    if (ratio <= 0.637070259)
      return 32 * sign;
    if (ratio <= 0.661885560)
      return 33 * sign;
    if (ratio <= 0.687280957)
      return 34 * sign;
    if (ratio <= 0.713293066)
      return 35 * sign;
    if (ratio <= 0.739961073)
      return 36 * sign;
    if (ratio <= 0.767326986)
      return 37 * sign;
    if (ratio <= 0.795435915)
      return 38 * sign;
    if (ratio <= 0.824336384)
      return 39 * sign;
    if (ratio <= 0.854080684)
      return 40 * sign;
    if (ratio <= 0.884725263)
      return 41 * sign;
    if (ratio <= 0.916331172)
      return 42 * sign;
    if (ratio <= 0.948964565)
      return 43 * sign;
    if (ratio <= 0.982697261)
      return 44 * sign;
    if (ratio <= 1.017607391)
      return 45 * sign;
    if (ratio <= 1.053780123)
      return 46 * sign;
    if (ratio <= 1.091308498)
      return 47 * sign;
    if (ratio <= 1.130294384)
      return 48 * sign;
    if (ratio <= 1.170849563)
      return 49 * sign;
    if (ratio <= 1.213097001)
      return 50 * sign;
    if (ratio <= 1.257172296)
      return 51 * sign;
    if (ratio <= 1.303225370)
      return 52 * sign;
    if (ratio <= 1.351422434)
      return 53 * sign;
    if (ratio <= 1.401948291)
      return 54 * sign;
    if (ratio <= 1.455009025)
      return 55 * sign;
    if (ratio <= 1.510835189)
      return 56 * sign;
    if (ratio <= 1.569685573)
      return 57 * sign;
    if (ratio <= 1.631851682)
      return 58 * sign;
    if (ratio <= 1.697663114)
      return 59 * sign;
    if (ratio <= 1.767494011)
      return 60 * sign;
    if (ratio <= 1.841770880)
      return 61 * sign;
    if (ratio <= 1.920982121)
      return 62 * sign;
    if (ratio <= 2.005689701)
      return 63 * sign;
    if (ratio <= 2.096543592)
      return 64 * sign;
    if (ratio <= 2.194299723)
      return 65 * sign;
    if (ratio <= 2.299842538)
      return 66 * sign;
    if (ratio <= 2.414213553)
      return 67 * sign;
    if (ratio <= 2.538647885)
      return 68 * sign;
    if (ratio <= 2.674621482)
      return 69 * sign;
    if (ratio <= 2.823912872)
      return 70 * sign;
    if (ratio <= 2.988684948)
      return 71 * sign;
    if (ratio <= 3.171594786)
      return 72 * sign;
    if (ratio <= 3.375943404)
      return 73 * sign;
    if (ratio <= 3.605883487)
      return 74 * sign;
    if (ratio <= 3.866713070)
      return 75 * sign;
    if (ratio <= 4.165299742)
      return 76 * sign;
    if (ratio <= 4.510708470)
      return 77 * sign;
    if (ratio <= 4.915156991)
      return 78 * sign;
    if (ratio <= 5.395517126)
      return 79 * sign;
    if (ratio <= 5.975764305)
      return 80 * sign;
    if (ratio <= 6.691156163)
      return 81 * sign;
    if (ratio <= 7.595754016)
      return 82 * sign;
    if (ratio <= 8.776887226)
      return 83 * sign;
    if (ratio <= 10.38539689)
      return 84 * sign;
    if (ratio <= 12.70620445)
      return 85 * sign;
    if (ratio <= 16.34985501)
      return 86 * sign;
    if (ratio <= 22.90376463)
      return 87 * sign;
    if (ratio <= 38.18845672)
      return 88 * sign;
    if (ratio <= 114.5886266)
      return 89 * sign;
    return 90;
}

/*=================================================================================================*\
|* END                                                                                             *|
\*=================================================================================================*/
