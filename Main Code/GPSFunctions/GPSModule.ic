/*=================================================================================================*\
|* GPSModule.ic                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* File #5                                                                                         *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Contains the functions that enable, disable and get data from the GPS.                 *|
\*=================================================================================================*/

/*=================================================================================================*\
|* Included Libraries                                                                              *|
\*=================================================================================================*/

#use GPSModule.icb

/*=================================================================================================*\
|* Constants                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* GPS            | This constant's definition is proof that the file is being used.               *|
|*----------------+--------------------------------------------------------------------------------*|
|* trafficIsRight | Renames the variable gps_stoplight.                                            *|
\*=================================================================================================*/

#define GPS 1

#define trafficIsRight gps_stoplight

/*=================================================================================================*\
|* Global Variables                                                                                *|
|*-------------------------------------------------------------------------------------------------*|
|* facingLeft    | The current direction the GPS beacon is facing. 1 for left, 0 for right         *|
|*---------------+---------------------------------------------------------------------------------*|
|* _gps_data[]   | An array used to get data from the GPS beacon.                                  *|
|*---------------+---------------------------------------------------------------------------------*|
|* gps_x         | The x location of the center of the GPS beacon.                                 *|
|*---------------+---------------------------------------------------------------------------------*|
|* gps_y         | The y location of the center of the GPS beacon.                                 *|
|*---------------+---------------------------------------------------------------------------------*|
|* gps_heading   | The current angle between the x-axis of the course and the GPS beacon.          *|
|*---------------+---------------------------------------------------------------------------------*|
|* gps_stoplight | The orientation of the missing stoplight. 0 for left, 1 for right.              *|
|*---------------+---------------------------------------------------------------------------------*|
|* gps_generator | This variable corresponds to the completion of the generator task. 0 for        *|
|*               | complete, 1 for incomplete.                                                     *|
\*=================================================================================================*/

int facingLeft = 1;
int _gps_data[5];
int gps_x, gps_y, gps_heading, gps_stoplight, gps_generator;

/*=================================================================================================*\
|* Functions                                                                                       *|
\*=================================================================================================*/

/*-------------------------------------------------------------------------------------------------*\
|* void GPSInitialize()                                                                            *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #50                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: This function initializes the GPS.                                                     *|
\*-------------------------------------------------------------------------------------------------*/

void GPSInitialize(int region)
{
    region = (int)region;
    
    #ifdef TEST_LOG
      {
        LogEvent(501);
    }
    #endif
    
    //Select region based on character ranges
    if((region >= 97) && (region <= 104)) // 'a'-'h'
      region-=96;
    else if((region >= 65) && (region <= 72)) // 'A'-'H'
      region-=64;
    else if((region >= 49) && (region <= 56)) // '1'-'8'
      region-=48;
    else if((region >= 1) && (region <= 8)) // 1-8
      region-=0;
    else // Bad
    {
        printf("INVALID REGION\n");
        while(1);
    }
    
    // Reconfigures serial port and sets region (gps still not enabled in software)
    gps_initialize_asm(region);
    // Physically enable RF receiver
    set_digital_out(0);
    
    #ifdef TEST_LOG
      {
        LogEvent(500);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void GPSDisable()                                                                               *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #51                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: This function disables the GPS from obtaining new readings.                            *|
\*-------------------------------------------------------------------------------------------------*/

void GPSDisable()
{
    #ifdef TEST_LOG
      {
        LogEvent(511);
    }
    #endif
    
    // Physically disable the RF receiver
    clear_digital_out(0);
    // Prepare the HandyBoard for serial communication and disables reception of GPS packets
    gps_disable_asm(0);
    
    #ifdef TEST_LOG
      {
        LogEvent(510);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void GPSEnable()                                                                                *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #52                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: This function enables the GPS to obtain readings.                                      *|
\*-------------------------------------------------------------------------------------------------*/

int GPSEnable()
{
    #ifdef TEST_LOG
      {
        LogEvent(521);
    }
    #endif
    
    // Enables software reception of GPS packets
    gps_enable_asm(0);
    
    #ifdef TEST_LOG
      {
        LogEvent(520);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* int GPSGetData()                                                                                *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #53                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: This function gets the current GPS reading.                                            *|
|*-------------------------------------------------------------------------------------------------*|
|* Returns: An integer corresponding to a successful reading. 1 is successful, 0 is unsuccessful.  *|
\*-------------------------------------------------------------------------------------------------*/

int GPSGetData()
{
    int gps_data_size;
    int counter = 0;
    
    #ifdef TEST_LOG
      {
        LogEvent(531);
    }
    #endif
    
    // Print message if stop signal has been received
    if(gps_stopped(0)>0)
      {
        printf("\nGPS - STOP RECEIVED\n");
        msleep(50L);
    }
    
    // Run assembly code function to find if data is ready
    if(gps_ready(0))
      {
        gps_data_size = gps_size(0);
        
        // Get the raw data from the packet
        while(counter < gps_data_size)
          {
            // Mask out the parity bit in the LSB
            _gps_data[counter] = (gps_element(counter) & 0xFE)/2;    
            counter++;
        }
        
        // Parse data from the individual bytes
        gps_x = _gps_data[0]*16+(_gps_data[1]&0xFC)/4 - 288;
        gps_y = (_gps_data[1]&0x3)*256 + _gps_data[2]*4 + (_gps_data[3]&0x30)/16;
        gps_heading = (_gps_data[3]&0x0F)*16 + (_gps_data[4]&0x3C)/4;
        gps_stoplight = _gps_data[4]&0x1;
        gps_generator = ( _gps_data[4]&0x2 ) / 2;
        
        // Clear ready flag (so that gps_ready(0) will return 0 until the next packet comes in)
        gps_clear(0);
        
        #ifdef TEST_LOG
          {
            LogEvent(530);
        }
        #endif
        return 1;
    }
    else
      {
        #ifdef usingTestLog
          {
            LogEvent(530);
        }
        #endif
        return 0;
    }
}

/*-------------------------------------------------------------------------------------------------*\
|* void GPSGetAbsolute()                                                                           *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #54                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: This function runs until it successfully gets correct data from the GPS.               *|
\*-------------------------------------------------------------------------------------------------*/

void GPSGetAbsolute()
{
    int initialHeading;
    int finalHeading;
    int initialX;
    int finalX;
    int initialY;
    int finalY;
    
    #ifdef TEST_LOG
      {
        LogEvent(541);
    }
    #endif
    
    msleep(GPS_STALL_TIME);
    while(!GPSGetData());
    initialHeading = gps_heading;
    initialX = gps_x;
    initialY = gps_y;
    
    msleep(GPS_STALL_TIME);
    while(!GPSGetData());
    finalHeading = gps_heading;
    finalX = gps_x;
    finalY = gps_y;
    
    while(initialHeading != finalHeading || initialX != finalX || initialY != finalY)
      {
        initialHeading = finalHeading;
        initialX = finalX;
        initialY = finalY;
        msleep(GPS_STALL_TIME);
        while(!GPSGetData());
        finalHeading = gps_heading;
        finalX = gps_x;
        finalY = gps_y;
    }
    
    #ifdef GPS_LOG
      {
        LogGPS(gps_x, gps_y, gps_heading, facingLeft);
    }
    #endif
    
    #ifdef TEST_LOG
      {
        LogEvent(540);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void Face()                                                                                     *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #55                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: This function determines the initial starting orientation of the GPS beacon.           *|
\*-------------------------------------------------------------------------------------------------*/

void Face()
{
    #ifdef TEST_LOG
      {
        LogEvent(551);
    }
    #endif
    
    if (gps_heading < 90)
      {
        facingLeft = 1;
    }
    else
      {
        facingLeft = 0;
    }
    
    #ifdef TEST_LOG
      {
        LogEvent(550);
    }
    #endif
}

/*=================================================================================================*\
|* END                                                                                             *|
\*=================================================================================================*/
