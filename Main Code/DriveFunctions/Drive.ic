/*=================================================================================================*\
|* Drive.ic                                                                                        *|
|*-------------------------------------------------------------------------------------------------*|
|* File #6                                                                                         *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Contains functions that utilize the motors.                                            *|
\*=================================================================================================*/

#if ENCODERS*ARCTAN*GPS

/*=================================================================================================*\
|* Constants                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* DRIVE | This constant's definition is proof that the file is being used.                        *|
\*=================================================================================================*/

#define DRIVE 1

/*=================================================================================================*\
|* Functions                                                                                       *|
\*=================================================================================================*/

/*-------------------------------------------------------------------------------------------------*\
|* void DriveTicks(int ticks, float power)                                                         *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #60                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Drives at a set power until a specified number of encoder ticks are recorded.          *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* int ticks   | The amount of ticks for which to run the motors.                                  *|
|*-------------+-----------------------------------------------------------------------------------*|
|* float power | The power at which to drive.                                                      *|
\*-------------------------------------------------------------------------------------------------*/

void DriveTicks(int ticks, float power)
{
    int slowPoint;
    float drivePower;
    
    #ifdef TEST_LOG
      {
        LogEvent(601);
    }
    #endif
    
    if (power > 0.)
      drivePower = 25.;
    else
      drivePower = -.25;
    
    leftEncoderCounts = 0;
    rightEncoderCounts = 0;
    
    ticks += leftEncoderCounts;
    slowPoint = ticks - 40;
    
    while(ticks > (leftEncoderCounts + rightEncoderCounts) / 2 && drivePower < power)
      {
        if (power > 0.)
          motor(RIGHT_MOTOR, (int)(++drivePower));
        else
          motor(RIGHT_MOTOR, (int)(--drivePower));
        motor(LEFT_MOTOR, (int)(drivePower));
    }
    
    while(ticks > leftEncoderCounts)
      {
        motor(RIGHT_MOTOR, (int)(power));
        motor(LEFT_MOTOR, (int)(power));
        
        if (leftEncoderCounts > slowPoint)
          {
            if (power > 0.)
              power = SLOW_SPEED;
            else
              power = -SLOW_SPEED;
        }
    };
    ao();
    
    #ifdef TEST_LOG
      {
        LogEvent(600);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void DriveDistance(float inches, float power)                                                   *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #61                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Drives a specified distance at a set power.                                            *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* float inches | The distance to drive in inches.                                                 *|
|*--------------+----------------------------------------------------------------------------------*|
|* float power  | The power at which to drive.                                                     *|
\*-------------------------------------------------------------------------------------------------*/

void DriveDistance(float inches, float power)
{
    int ticks;
    
    #ifdef TEST_LOG
      {
        LogEvent(611);
    }
    #endif
    
    ticks = (int)(inches * 3.183098862);
    
    DriveTicks(ticks, power);
    
    #ifdef TEST_LOG
      {
        LogEvent(610);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void TurnTicks(int ticks)                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #62                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Turns until a specified amount of encoder ticks are recorded.                          *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* float ticks | The amount of ticks to turn.                                                      *|
\*-------------------------------------------------------------------------------------------------*/


void TurnTicks(int ticks)
{
    leftEncoderCounts = 0;
    
    #ifdef TEST_LOG
      {
        LogEvent(621);
    }
    #endif
    
    if (ticks > 0)
      {
        motor(RIGHT_MOTOR, -TURN_SPEED);
        motor(LEFT_MOTOR, TURN_SPEED);
    }
    else
      {
        motor(RIGHT_MOTOR, TURN_SPEED);
        motor(LEFT_MOTOR, -TURN_SPEED);
        ticks = -ticks;
    }
    
    while (leftEncoderCounts < ticks);
    
    ao();
    
    #ifdef TEST_LOG
      {
        LogEvent(620);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void TurnDegrees(int degrees)                                                                   *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #63                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Turns a specified amount of degrees.                                                   *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* int degrees | The amount of degrees to turn.                                                    *|
\*-------------------------------------------------------------------------------------------------*/

void TurnDegrees(int degrees)
{
    int ticks;
    
    #ifdef TEST_LOG
      {
        LogEvent(631);
    }
    #endif
    
    ticks = (int)(degrees * 7 / 36) * 11/10;
    
    TurnTicks(ticks);
    
    #ifdef TEST_LOG
      {
        LogEvent(630);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void TurnTowards(int x, int y)                                                                  *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #64                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Turns towards a specified (x, y) point.                                                *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* int x | The x value of the point to turn towards.                                               *|
|*-------+-----------------------------------------------------------------------------------------*|
|* int y | The y value of the point to turn towards.                                               *|
\*-------------------------------------------------------------------------------------------------*/

void TurnTowards(int x, int y)
{
    int turn;
    
    #ifdef TEST_LOG
      {
        LogEvent(641);
    }
    #endif
    
    GPSGetAbsolute();
    
    if(facingLeft)
      if(gps_y >= y)
        turn = gps_heading + 180 + Arctan(gps_x - x, gps_y - y);
      else
        turn = gps_heading + Arctan(gps_x - x, gps_y - y);
    else
      {
        if(gps_y >= y)
          turn = gps_heading + Arctan(gps_x - x, gps_y - y);
        else
          turn = gps_heading + 180 + Arctan(gps_x - x, gps_y - y);
    }
    if(turn >= 180)
      turn -= 360;
    else if(turn <= -180)
      turn += 360;
    
    TurnDegrees(turn);
    
    #ifdef TEST_LOG
      {
        LogEvent(640);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void TurnAgainst(int x, int y)                                                                  *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #65                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Turns away from a specified (x, y) point.                                              *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* int x | The x value of the point to turn away from.                                             *|
|*-------+-----------------------------------------------------------------------------------------*|
|* int y | The y value of the point to turn away from.                                             *|
\*-------------------------------------------------------------------------------------------------*/

void TurnAgainst(int x, int y)
{
    int turn;
    
    #ifdef TEST_LOG
      {
        LogEvent(651);
    }
    #endif
    
    GPSGetAbsolute();
    
    if(facingLeft)
      if(gps_y >= y)
        turn = gps_heading + 180 + Arctan(gps_x - x, gps_y - y);
      else
        turn = gps_heading + Arctan(gps_x - x, gps_y - y);
    else
      {
        if(gps_y >= y)
          turn = gps_heading + Arctan(gps_x - x, gps_y - y);
        else
          turn = gps_heading + 180 + Arctan(gps_x - x, gps_y - y);
    }
    
    turn -= 180;
    
    if(turn >= 180)
      turn -= 360;
    else if(turn <= -180)
      {
        turn += 360;
    }
    
    TurnDegrees(turn);
    
    #ifdef TEST_LOG
      {
        LogEvent(650);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void GetTo(int x, int y, float speed)                                                           *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #66                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Travels to a specified (x, y) position at a specified speed.                           *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* int x       | The x value of the point to get to.                                               *|
|*-------------+-----------------------------------------------------------------------------------*|
|* int y       | The y value of the point to get to.                                               *|
|*-------------+-----------------------------------------------------------------------------------*|
|* float speed | The speed at which to travel.                                                     *|
\*-------------------------------------------------------------------------------------------------*/

void GetTo(int x, int y, float speed)
{
    #ifdef TEST_LOG
      {
        LogEvent(661);
    }
    #endif
    
    TurnTowards(x, y);
    DriveDistance(.25 * sqrt((float)((y - gps_y) * (y - gps_y) + (x - gps_x) * (x - gps_x))), speed);
    
    #ifdef TEST_LOG
      {
        LogEvent(660);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void FollowLine()                                                                               *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #67                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Follows a line painted on the ground.                                                  *|
\*-------------------------------------------------------------------------------------------------*/

void FollowLine()
{
    #ifdef TEST_LOG
      {
        LogEvent(671);
    }
    #endif
    
    motor(LEFT_MOTOR, LINE_FOLLOW_SPEED);
    motor(RIGHT_MOTOR, LINE_FOLLOW_SPEED);
    while(1)
      {
        if(analog(CENTER_OPTOSENSOR) < LINE_FOLLOW_THRESHOLD)
          {
            while(analog(LEFT_OPTOSENSOR) > LINE_FOLLOW_THRESHOLD)
              {
                motor(RIGHT_MOTOR, 0);
            }
            
            motor(LEFT_MOTOR, LINE_FOLLOW_SPEED);
            motor(RIGHT_MOTOR, LINE_FOLLOW_SPEED);
            
            while(analog(RIGHT_OPTOSENSOR) > LINE_FOLLOW_THRESHOLD)
              {
                motor(LEFT_MOTOR, 0);
            }
        }
        
        motor(LEFT_MOTOR, LINE_FOLLOW_SPEED);
        motor(RIGHT_MOTOR, LINE_FOLLOW_SPEED);
    }
    ao();
    
    #ifdef TEST_LOG
      {
        LogEvent(670);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void FollowLineBackwards()                                                                      *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #68                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Follows a line painted on the ground backwards.                                        *|
\*-------------------------------------------------------------------------------------------------*/

void FollowLineBackwards()
{
    #ifdef TEST_LOG
      {
        LogEvent(681);
    }
    #endif
    
    motor(LEFT_MOTOR, -LINE_FOLLOW_SPEED);
    motor(RIGHT_MOTOR, -LINE_FOLLOW_SPEED);
    while(1)
      {
        if(analog(CENTER_OPTOSENSOR) < LINE_FOLLOW_THRESHOLD)
          {
            while(analog(LEFT_OPTOSENSOR) > LINE_FOLLOW_THRESHOLD)
              {
                motor(LEFT_MOTOR, 0);
            }
            
            motor(LEFT_MOTOR, -LINE_FOLLOW_SPEED);
            motor(RIGHT_MOTOR, -LINE_FOLLOW_SPEED);
            
            while(analog(RIGHT_OPTOSENSOR) > LINE_FOLLOW_THRESHOLD)
              {
                motor(RIGHT_MOTOR, 0);
            }
        }
        
        motor(LEFT_MOTOR, -LINE_FOLLOW_SPEED);
        motor(RIGHT_MOTOR, -LINE_FOLLOW_SPEED);
    }
    ao();
    
    #ifdef TEST_LOG
      {
        LogEvent(680);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*\
|* void CorrectHeading()                                                                           *|
|*-------------------------------------------------------------------------------------------------*|
|* Function #69                                                                                    *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Turns in small increments towards a specified GPS heading until it is achieved.        *|
|*-------------------------------------------------------------------------------------------------*|
|* Arguments                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* int heading | The desired heading to turn towards.                                              *|
\*-------------------------------------------------------------------------------------------------*/

void CorrectHeading(int heading)
{
    #ifdef TEST_LOG
      {
        LogEvent(691);
    }
    #endif
    
    GPSGetAbsolute();
    while(gps_heading - heading > 2 || gps_heading - heading < -2)
      {
        if(gps_heading - heading < -2)
          {
            motor(LEFT_MOTOR, -50);
            motor(RIGHT_MOTOR, 50);
            msleep(40L);
            ao();
        }
        else if(gps_heading - heading > 2)
          {
            motor(LEFT_MOTOR, 50);
            motor(RIGHT_MOTOR, -50);
            msleep(40L);
            ao();
        }
        
        GPSGetAbsolute();   
    }
    
    #ifdef TEST_LOG
      {
        LogEvent(690);
    }
    #endif
}

/*=================================================================================================*\
|* END                                                                                             *|
\*=================================================================================================*/

#endif
