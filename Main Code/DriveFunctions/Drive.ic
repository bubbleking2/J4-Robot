/*-------------------------------------------------------------------------------------------------*/
//File #6
/*-------------------------------------------------------------------------------------------------*/

#if ENCODERS*ARCTAN*GPS

#define DRIVE 1

/*-------------------------------------------------------------------------------------------------*/
//Function #0
/*-------------------------------------------------------------------------------------------------*/

void DriveTicks(int ticks, float power)
{
    int slowPoint;
    float drivePower;
    
    #ifdef TEST_LOG
      {
        LogEvent(601);
    }
    #endif
    
    if (power > 0.)
      drivePower = 25.;
    else
      drivePower = -.25;
    
    leftEncoderCounts = 0;
    rightEncoderCounts = 0;
    
    ticks += leftEncoderCounts;
    slowPoint = ticks - 30;
    
    while(ticks > (leftEncoderCounts + rightEncoderCounts) / 2 && drivePower < power)
      {
        if (power > 0.)
          motor(RIGHT_MOTOR, (int)(++drivePower));
        else
          motor(RIGHT_MOTOR, (int)(--drivePower));
        motor(LEFT_MOTOR, (int)(drivePower));
    }
    
    while(ticks > leftEncoderCounts)
      {
        motor(RIGHT_MOTOR, (int)(power));
        motor(LEFT_MOTOR, (int)(power));
        
        if (leftEncoderCounts > slowPoint)
          {
            if (power > 0.)
              power = 27.;
            else
              power = -27.;
        }
    };
    ao();
    
    #ifdef TEST_LOG
      {
        LogEvent(600);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #1
/*-------------------------------------------------------------------------------------------------*/

void DriveDistance(float inches, float power)
{
    int ticks;
    
    #ifdef TEST_LOG
      {
        LogEvent(611);
    }
    #endif
    
    ticks = (int)(inches * 3.183098862);
    
    DriveTicks(ticks, power);
    
    #ifdef TEST_LOG
      {
        LogEvent(610);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #2
/*-------------------------------------------------------------------------------------------------*/

void TurnTicks(int ticks)
{
    leftEncoderCounts = 0;
    
    #ifdef TEST_LOG
      {
        LogEvent(621);
    }
    #endif
    
    if (ticks > 0)
      {
        motor(RIGHT_MOTOR, -35);
        motor(LEFT_MOTOR, 35);
    }
    else
      {
        motor(RIGHT_MOTOR, 35);
        motor(LEFT_MOTOR, -35);
        ticks = -ticks;
    }
    
    while (leftEncoderCounts < ticks);
    
    ao();
    
    #ifdef TEST_LOG
      {
        LogEvent(620);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #3
/*-------------------------------------------------------------------------------------------------*/

void TurnDegrees(int degrees)
{
    int ticks;
    
    #ifdef TEST_LOG
      {
        LogEvent(631);
    }
    #endif
    
    ticks = (int)(degrees * 7 / 36) * 110/100;
    
    TurnTicks(ticks);
    
    #ifdef TEST_LOG
      {
        LogEvent(630);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #4
/*-------------------------------------------------------------------------------------------------*/

void TurnTowards(int x, int y)
{
    int turn;
    
    #ifdef TEST_LOG
      {
        LogEvent(641);
    }
    #endif
    
    GPSGetAbsolute();
    
    if(facingLeft)
      if(gps_y >= y)
        turn = gps_heading + 180 + Arctan(gps_x - x, gps_y - y);
      else
        turn = gps_heading + Arctan(gps_x - x, gps_y - y);
    else
      {
        if(gps_y >= y)
          turn = gps_heading + Arctan(gps_x - x, gps_y - y);
        else
          turn = gps_heading + 180 + Arctan(gps_x - x, gps_y - y);
    }
    if(turn >= 180)
      turn = turn - 360;
    else if(turn <= -180)
      turn = turn + 360;
    
    TurnDegrees(turn);
    
    if(gps_heading + turn > 179 || gps_heading + turn < 0)
      {
        facingLeft = !facingLeft;
    }
    
    #ifdef TEST_LOG
      {
        LogEvent(640);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #5
/*-------------------------------------------------------------------------------------------------*/

void TurnAgainst(int x, int y)
{
    int turn;
    
    #ifdef TEST_LOG
      {
        LogEvent(651);
    }
    #endif
    
    GPSGetAbsolute();
    
    if(facingLeft)
      if(gps_y >= y)
        turn = gps_heading + 180 + Arctan(gps_x - x, gps_y - y);
      else
        turn = gps_heading + Arctan(gps_x - x, gps_y - y);
    else
      {
        if(gps_y >= y)
          turn = gps_heading + Arctan(gps_x - x, gps_y - y);
        else
          turn = gps_heading + 180 + Arctan(gps_x - x, gps_y - y);
    }
    if(turn >= 180)
      turn = turn - 360;
    else if(turn <= -180)
      turn = turn + 360;
    
    turn += 180;
    
    if(turn >= 180)
      turn = turn - 360;
    
    TurnDegrees(turn);
    
    if(gps_heading + turn > 179 || gps_heading + turn < 0)
      {
        facingLeft = !facingLeft;
    }
    
    #ifdef TEST_LOG
      {
        LogEvent(650);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #6
/*-------------------------------------------------------------------------------------------------*/

void GetTo(int x, int y, float speed)
{
    #ifdef TEST_LOG
      {
        LogEvent(661);
    }
    #endif
    
    TurnTowards(x, y);
    DriveDistance(.25 * sqrt((float)((y - gps_y) * (y - gps_y) + (x - gps_x) * (x - gps_x))), speed);
    
    #ifdef TEST_LOG
      {
        LogEvent(660);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #7
/*-------------------------------------------------------------------------------------------------*/

void FollowLine()
{
    #ifdef TEST_LOG
      {
        LogEvent(671);
    }
    #endif
    
    motor(LEFT_MOTOR, FOLLOW_SPEED);
    motor(RIGHT_MOTOR, FOLLOW_SPEED);
    while(1)
      {
        if(analog(CENTER_OPTOSENSOR) < FOLLOW_THRESHOLD)
          {
            while(analog(LEFT_OPTOSENSOR) > FOLLOW_THRESHOLD)
              {
                motor(RIGHT_MOTOR, 0);
            }
            
            motor(LEFT_MOTOR, FOLLOW_SPEED);
            motor(RIGHT_MOTOR, FOLLOW_SPEED);
            
            while(analog(RIGHT_OPTOSENSOR) > FOLLOW_THRESHOLD)
              {
                motor(LEFT_MOTOR, 0);
            }
        }
        
        motor(LEFT_MOTOR, FOLLOW_SPEED);
        motor(RIGHT_MOTOR, FOLLOW_SPEED);
    }
    ao();
    
    #ifdef TEST_LOG
      {
        LogEvent(670);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #8
/*-------------------------------------------------------------------------------------------------*/

void FollowLineBackwards()
{
    #ifdef TEST_LOG
      {
        LogEvent(681);
    }
    #endif
    
    motor(LEFT_MOTOR, -FOLLOW_SPEED);
    motor(RIGHT_MOTOR, -FOLLOW_SPEED);
    while(1)
      {
        if(analog(CENTER_OPTOSENSOR) < FOLLOW_THRESHOLD)
          {
            while(analog(LEFT_OPTOSENSOR) > FOLLOW_THRESHOLD)
              {
                motor(LEFT_MOTOR, 0);
            }
            
            motor(LEFT_MOTOR, -FOLLOW_SPEED);
            motor(RIGHT_MOTOR, -FOLLOW_SPEED);
            
            while(analog(RIGHT_OPTOSENSOR) > FOLLOW_THRESHOLD)
              {
                motor(RIGHT_MOTOR, 0);
            }
        }
        
        motor(LEFT_MOTOR, -FOLLOW_SPEED);
        motor(RIGHT_MOTOR, -FOLLOW_SPEED);
    }
    ao();
    
    #ifdef TEST_LOG
      {
        LogEvent(680);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------*/

#endif
