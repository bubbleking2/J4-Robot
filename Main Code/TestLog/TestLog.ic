/*=================================================================================================*\
|* TestLog.ic                                                                                      *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Creates an array of ints that correspond to actions taken by the program.              *|
\*=================================================================================================*/

/*=================================================================================================*\
|* Constants                                                                                       *|
|*-------------------------------------------------------------------------------------------------*|
|* TEST_LOG        | This constant's definition is proof that the file is being used.              *|
|*-----------------+-------------------------------------------------------------------------------*|
|* TEST_LOG_LENGTH | This constant's value is the amount of data being stored in the test log.     *|
\*=================================================================================================*/

#define TEST_LOG 1
#define TEST_LOG_LENGTH 256

/*=================================================================================================*\
|* Globals                                                                                         *|
|*-------------------------------------------------------------------------------------------------*|
|* int testLog[] | This int's contents are the functions ran on the previous execution.            *|
|*---------------+---------------------------------------------------------------------------------*|
|* int logIndex  | This int is the current location being written to in testLog.                   *|
|*---------------+---------------------------------------------------------------------------------*|
|* int logOn     | This int is declares whether the testLog is being written to.                   *|
\*=================================================================================================*/

persistent int testLog[TEST_LOG_LENGTH];
int logIndex = 0;
int logOn = 0;

/*=================================================================================================*\
|* Functions                                                                                       *|
\*=================================================================================================*/

/*-------------------------------------------------------------------------------------------------*\
|* void ResetTestLog()                                                                             *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Resets the data in testLog and prepares writing for the current execution.             *|
\*-------------------------------------------------------------------------------------------------*/

void ResetTestLog()
{
    int index = 0;
    printf("\nPress Start to reset test log.");
    start_press();
    printf("\nResetting Test  Log");
    while(index < TEST_LOG_LENGTH)
      {
        testLog[index] = 0;
        index++;
    }
    logIndex = 0;
}

/*-------------------------------------------------------------------------------------------------*\
|* void StartLogging()                                                                             *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Begins logging for the current execution.                                              *|
\*-------------------------------------------------------------------------------------------------*/

void StartLogging()
{
    logOn = 1;
}

/*-------------------------------------------------------------------------------------------------*\
|* void StopLogging()                                                                              *|
|*-------------------------------------------------------------------------------------------------*|
|* Purpose: Stops logging for the current execution.                                               *|
\*-------------------------------------------------------------------------------------------------*/

void StopLogging()
{
    logOn = 0;
}

/*-------------------------------------------------------------------------------------------------*\
|* void LogEvent()                                                                                 *|
|--------------------------------------------------------------------------------------------------*|
|* Purpose: Logs an event at the current logIndex in testLog                                       *|
\*-------------------------------------------------------------------------------------------------*/

void LogEvent(int eventNumber)
{
    if(logIndex < TEST_LOG_LENGTH && logOn)
      {
        if(logIndex >= 2)
          {
            if(testLog[logIndex - 1] != eventNumber && testLog[logIndex - 2] != eventNumber)
              {
                testLog[logIndex] = eventNumber;
                logIndex++;
            }
        }
        else
          {
            testLog[logIndex] = eventNumber;
            logIndex++;
        }
    }
}

/*=================================================================================================*\
|* END                                                                                             *|
\*=================================================================================================*/
