//File #5

#ifdef LEFT_MOTOR
#else
#define LEFT_MOTOR 1
#endif

#ifdef RIGHT_MOTOR
#else
#define RIGHT_MOTOR 3
#endif

#ifdef USING_ENCODERS
#else
#use Encoders\Encoders.ic
#endif

#ifdef USING_GPS_MODULE
#else
#use GPS\GPSModule.ic
#endif

#define USING_DRIVE 1

/*-------------------------------------------------------------------------------------------------*/

void DriveTicks(int ticks, int power)
{
    int slowPoint;
    
    ticks += leftEncoderCounts;
    slowPoint = ticks - 30;
    
    while(ticks > leftEncoderCounts)
      {
        motor(LEFT_MOTOR, power);
        motor(RIGHT_MOTOR, power);
        
        if(leftEncoderCounts < rightEncoderCounts)
          {
            motor(LEFT_MOTOR, power - power / 75);
        }
        else if(leftEncoderCounts > rightEncoderCounts)
          {
            motor(RIGHT_MOTOR, power - power / 75);
        }
        
        if (leftEncoderCounts > slowPoint)
          {
            power = 25;
        }
        
    };
    motor(LEFT_MOTOR, 0);
    motor(RIGHT_MOTOR, 0);
}

void DriveStraightDistance(float inches, int power) //Function #2
{
    int ticks;
    
    #ifdef usingTestLog
      {
        LogEvent(521);
    }
    #endif
    
    ticks = (int)(inches * 3.183098862);
    
    DriveTicks(ticks, power);
    
    #ifdef usingTestLog
      {
        LogEvent(520);
    }
    #endif
}

void TurnTicks(int ticks)
{
    leftEncoderCounts = 0;
    
    if (ticks > 0)
      {
        motor(LEFT_MOTOR, 25);
        motor(RIGHT_MOTOR, -25);
    }
    else
      {
        motor(LEFT_MOTOR, -25);
        motor(RIGHT_MOTOR, 25);
        ticks = -ticks;
    }
    
    while (leftEncoderCounts < ticks);
    
    motor(LEFT_MOTOR, 0);
    motor(RIGHT_MOTOR, 0);
}

void TurnDegrees(float degrees)
{
    int ticks;
    
    #ifdef usingTestLog
      {
        LogEvent(571);
    }
    #endif
    
    ticks = (int)(degrees * 7. / 36.);
    
    TurnTicks(ticks);
    
    #ifdef usingTestLog
      {
        LogEvent(570);
    }
    #endif
}

void GetTo(int x, int y, int initialDirection)
{
    int thisX;
    int thisY;
    int newHeading;
    GPSGetAbsoluteHeading();
    thisX = gps_x;
    thisY = gps_y;
    beep();
    newHeading = (int)atan((float)(thisX - x) / (float)(thisY - y));
    beep();
    
    
    //TurnCounterClockwiseDegrees(gps_heading - newHeading);
}

void TurnTowards(int x, int y, int initialDirection)
{
    
}
