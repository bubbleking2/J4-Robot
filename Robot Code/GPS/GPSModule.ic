//File #2

#use GPSModule.icb

int _gps_data[5];
int gps_x, gps_y, gps_heading, gps_stoplight, gps_generator;

/*-------------------------------------------------------------------------------------------------*/

void GPSInitialize(int region) //Function #1
{
    region = (int)region;
    
    #ifdef usingTestLog
      {
        LogEvent(211);
    }
    #endif
    
    //Select region based on character ranges
    if((region >= 97) && (region <= 104)) // 'a'-'h'
      region-=96;
    else if((region >= 65) && (region <= 72)) // 'A'-'H'
      region-=64;
    else if((region >= 49) && (region <= 56)) // '1'-'8'
      region-=48;
    else if((region >= 1) && (region <= 8)) // 1-8
      region-=0;
    else // Bad
    {
        printf("INVALID REGION\n");
        while(1);
    }
    
    // Reconfigures serial port and sets region (gps still not enabled in software)
    gps_initialize_asm(region);
    // Physically enable RF receiver
    set_digital_out(0);
    
    #ifdef usingTestLog
      {
        LogEvent(210);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/

void GPSDisable() //Function #2
{
    #ifdef usingTestLog
      {
        LogEvent(221);
    }
    #endif
    
    // Physically disable the RF receiver
    clear_digital_out(0);
    // Prepare the HandyBoard for serial communication and disables reception of GPS packets
    gps_disable_asm(0);
    
    #ifdef usingTestLog
      {
        LogEvent(220);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/

int GPSEnable() //Function #3
{
    #ifdef usingTestLog
      {
        LogEvent(231);
    }
    #endif
    
    // Enables software reception of GPS packets
    gps_enable_asm(0);
    
    #ifdef usingTestLog
      {
        LogEvent(230);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/

int GPSGetData() //Function #4
{
    int gps_data_size;
    int counter = 0;
    
    #ifdef usingTestLog
      {
        LogEvent(241);
    }
    #endif
    
    // Print message if stop signal has been received
    if(gps_stopped(0)>0)
      {
        printf("\nGPS - STOP RECEIVED\n");
        msleep(50L);
    }
    
    // Run assembly code function to find if data is ready
    if(gps_ready(0))
      {
        gps_data_size = gps_size(0);
        
        // Get the raw data from the packet
        while(counter < gps_data_size)
          {
            // Mask out the parity bit in the LSB
            _gps_data[counter] = (gps_element(counter) & 0xFE)/2;    
            counter++;
        }
        
        // Parse data from the individual bytes
        gps_x = _gps_data[0]*16+(_gps_data[1]&0xFC)/4 - 288;
        gps_y = (_gps_data[1]&0x3)*256 + _gps_data[2]*4 + (_gps_data[3]&0x30)/16;
        gps_heading = (_gps_data[3]&0x0F)*16 + (_gps_data[4]&0x3C)/4;
        gps_stoplight = _gps_data[4]&0x1;
        gps_generator = ( _gps_data[4]&0x2 ) / 2;
        
    #ifdef usingTestLog
      {
        LogEvent(240);
    }
    #endif
        
        // Clear ready flag (so that gps_ready(0) will return 0 until the next packet comes in)
        gps_clear(0);
        
        return 1;
    }
    else
      {
        return 0;
    }
}

/*-------------------------------------------------------------------------------------------------*/
