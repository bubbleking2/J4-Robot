/*-------------------------------------------------------------------------------------------------*/
//File #5
/*-------------------------------------------------------------------------------------------------*/

#define GPS 1

#use GPSModule.icb

#define trafficIsRight gps_stoplight


int facingLeft = 1;
int _gps_data[5];
int gps_x, gps_y, gps_heading, gps_stoplight, gps_generator;

/*-------------------------------------------------------------------------------------------------*/
//Function #0
/*-------------------------------------------------------------------------------------------------*/

void GPSInitialize(int region)
{
    region = (int)region;
    
    #ifdef TEST_LOG
      {
        LogEvent(501);
    }
    #endif
    
    //Select region based on character ranges
    if((region >= 97) && (region <= 104)) // 'a'-'h'
      region-=96;
    else if((region >= 65) && (region <= 72)) // 'A'-'H'
      region-=64;
    else if((region >= 49) && (region <= 56)) // '1'-'8'
      region-=48;
    else if((region >= 1) && (region <= 8)) // 1-8
      region-=0;
    else // Bad
    {
        printf("INVALID REGION\n");
        while(1);
    }
    
    // Reconfigures serial port and sets region (gps still not enabled in software)
    gps_initialize_asm(region);
    // Physically enable RF receiver
    set_digital_out(0);
    
    #ifdef TEST_LOG
      {
        LogEvent(500);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #1
/*-------------------------------------------------------------------------------------------------*/

void GPSDisable()
{
    #ifdef TEST_LOG
      {
        LogEvent(511);
    }
    #endif
    
    // Physically disable the RF receiver
    clear_digital_out(0);
    // Prepare the HandyBoard for serial communication and disables reception of GPS packets
    gps_disable_asm(0);
    
    #ifdef TEST_LOG
      {
        LogEvent(510);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #2
/*-------------------------------------------------------------------------------------------------*/

int GPSEnable()
{
    #ifdef TEST_LOG
      {
        LogEvent(521);
    }
    #endif
    
    // Enables software reception of GPS packets
    gps_enable_asm(0);
    
    #ifdef TEST_LOG
      {
        LogEvent(520);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #3
/*-------------------------------------------------------------------------------------------------*/

int GPSGetData()
{
    int gps_data_size;
    int counter = 0;
    
    #ifdef TEST_LOG
      {
        LogEvent(531);
    }
    #endif
    
    // Print message if stop signal has been received
    if(gps_stopped(0)>0)
      {
        printf("\nGPS - STOP RECEIVED\n");
        msleep(50L);
    }
    
    // Run assembly code function to find if data is ready
    if(gps_ready(0))
      {
        gps_data_size = gps_size(0);
        
        // Get the raw data from the packet
        while(counter < gps_data_size)
          {
            // Mask out the parity bit in the LSB
            _gps_data[counter] = (gps_element(counter) & 0xFE)/2;    
            counter++;
        }
        
        // Parse data from the individual bytes
        gps_x = _gps_data[0]*16+(_gps_data[1]&0xFC)/4 - 288;
        gps_y = (_gps_data[1]&0x3)*256 + _gps_data[2]*4 + (_gps_data[3]&0x30)/16;
        gps_heading = (_gps_data[3]&0x0F)*16 + (_gps_data[4]&0x3C)/4;
        gps_stoplight = _gps_data[4]&0x1;
        gps_generator = ( _gps_data[4]&0x2 ) / 2;
        
        // Clear ready flag (so that gps_ready(0) will return 0 until the next packet comes in)
        gps_clear(0);
        
        #ifdef TEST_LOG
          {
            LogEvent(530);
        }
        #endif
        return 1;
    }
    else
      {
        #ifdef usingTestLog
          {
            LogEvent(530);
        }
        #endif
        return 0;
    }
}

/*-------------------------------------------------------------------------------------------------*/
//Function #4
/*-------------------------------------------------------------------------------------------------*/

void GPSGetAbsolute()
{
    int initialHeading;
    int finalHeading;
    int initialX;
    int finalX;
    int initialY;
    int finalY;
    
    #ifdef TEST_LOG
      {
        LogEvent(541);
    }
    #endif
    
    msleep(250L);
    
    while(!GPSGetData());
    initialHeading = gps_heading;
    initialX = gps_x;
    initialY = gps_y;
    
    while(!GPSGetData());
    finalHeading = gps_heading;
    finalX = gps_x;
    finalY = gps_y;
    
    while(initialHeading != finalHeading || initialX != finalX || initialY != finalY)
      {
        initialHeading = finalHeading;
        initialX = finalX;
        initialY = finalY;
        while(!GPSGetData());
        finalHeading = gps_heading;
        finalX = gps_x;
        finalY = gps_y;
    }
    
    #ifdef TEST_LOG
      {
        LogEvent(540);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
//Function #5
/*-------------------------------------------------------------------------------------------------*/

void Face()
{
    #ifdef TEST_LOG
      {
        LogEvent(551);
    }
    #endif
    
    if (gps_heading < 90)
      {
        facingLeft = 1;
    }
    else
      {
        facingLeft = 0;
    }
    
    #ifdef TEST_LOG
      {
        LogEvent(550);
    }
    #endif
}

/*-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------*/
