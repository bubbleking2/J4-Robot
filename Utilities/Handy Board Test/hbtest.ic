v/*************************** new-hbtest.c ********************************/
/*
  Test program for Handy Board
  
  version 1.7 1/05
  testmotors() updated to reduce strain on HB motor drivers

  version 1.6 1/04
  CMUcam test updated to use new library and serial handlers

  version 1.5 5/03
  Expanded by Dan Gates to add the CMUcam comm test.
  Reqires serial.icb to be in the same directory.

  version 1.4 1/02
  Changed by Randy Sargent for IC 4.0 and to include srf04 sonar test.
  
  version 1.3 1/01
  Changed by Anne Wright for Botball to allow selecting which test
  using the knob.  Program previously called hb-expbd-test.c.  Also
  includes hbmenu.c.

  version 1.2 11/00
  tests IR emitter -dpm

  version 1.1 7/98
  Expanded by Dave Miller 7/13/98 dmiller@kipr.org
  to include servo  and to handle menuing.

  version 1.0 -- 26 nov 95
  Fred G. Martin (fredm@media.mit.edu)
  
  
  
*/

#define TESTNUM 8

#use "cmucamlib.ic"

char buff[11];


void main()
{
    char a[TESTNUM][16]={"Menu: Motors","Menu: Servo","Menu: Digitals",
          "Menu: Analogs", "Menu: Knob", "Menu: IR", "Menu: Sonar", "Menu: CMUcam"};
    
    printf("KISS Institute  Press START\n");
    while(!start_button());
    printf("Turn knob to    select test\n");
    sleep(1.0);
    while(1) {
        int sel;
        printf("Turn knob to    select test\n");
        sleep(1.0);
        
        sel = select_string(a,TESTNUM);
        if(sel==0) testmotors();
        else if(sel==1) testservo(); 
        else if(sel==2) testdigitals();
        else if(sel==3) testanalogs();
        else if(sel==4) testknob();
        else if(sel==5) testir();
        else if(sel==6) testsonar(); 
        else if(sel==7) testcmu();
        else if(sel==8) break;
    }
    printf("Done\n");
}
void
testmotors(void)
{
    printf("Motor test, HoldSTOP to end    \n");
    while (!stop_button()) {
        int i;
        for (i= 0; (!stop_button() && (i< 2)); i++) {
            motor(i,70); msleep(250L);
            off(i);
            motor(i+2,70); msleep(250L);
            off(i+2);
        }
        for (i= 0; (!stop_button() && (i< 2)); i++) {
            motor(i,-70); msleep(250L);
            off(i);
            motor(i+2,-70); msleep(250L);
            off(i+2);
        }
    }
    beep();
}

void 
testservo(void)
{
    int i;
    printf("Attach Servos   Press START\n");
    while(!start_button());
    init_expbd_servos(1);
    while(!stop_button()) 
      for (i=0;(!stop_button() && i<4000);i=i+100) {
          printf("Hold STOP to end Servo=%d\n",i);
          servo0=servo1=servo2=servo3=servo4=servo5=i;
          msleep(50L);
      }
    init_expbd_servos(0);
    beep();
}


void
testdigitals(void)
{
    printf("Digital inputs  STOP to end\n");
    sleep(1.0);
    printf("Turn knob to    select port\n");
    sleep(1.0);
    while (!stop_button()) {
        /* Get the value of the knob.  The digital port numbering is 7-15 */
        int val = knob_int_value(6, 15);
        
        if(val == 6) {   /* show all */
            int i;
            printf("Ports 15 ...  7       ");
            for (i=15; i>6; i--)
              if (digital(i)) printf("1");
              else printf("0");
            printf("\n");
        }
        else {
            printf("Port %d: %d\n", val, digital(val));
        }
        msleep(100L);
    }
    beep();
}

void
testknob(void)
{
    while (!stop_button()) {
        printf("Turn knob; STOP to end -> %d\n", knob());
        msleep(100L);
    }
    beep();
}

void
testsonar(void)
{
    while (!stop_button()) {
        printf("Test sonar; STOP to end -> %d\n", sonar());
        msleep(100L);
    }
    beep();
} 

void
testanalogs(void)
{
    printf("Analog ins;     STOP to end\n");
    sleep(1.0);
    printf("Turn knob to    select port\n");
    sleep(1.0);
    while (!stop_button()) {
        /* Get the value of the knob.  The A/D numbering is 2-6, then 
    16-31.  Since this is discontinuous, get continuous number
    between 2 and 22, and then add 9 to any number > 6 */
        int val = knob_int_value(2, 22);
        
        if(val>6){
            val = val + 9;
        }
        
        printf("Port %d: %d\n", val, analog(val));
        msleep(100L);
    }
    beep();
}


void hb_ir_transmit_on()
{
    bit_set(0x1000,0b01000000);
}

void hb_ir_transmit_off()
{
    bit_clear(0x1000,0b01000000);
}

void testir()
{
    printf("Blinking IR xmit STOP to stop\n");
    while(!stop_button()){
        hb_ir_transmit_on();
        sleep(.1);
        hb_ir_transmit_off();
        sleep(0.1);
    }
    beep();
}

void testcmu()
{
    printf("Attach CMUcam   Press START\n");
    while(!start_button()){}
    beep();
    if(init_camera()){
        printf("CMUcam is working\n");
        while(!stop_button()); //wait for end
    }
}



/****************************** hbmenu.c ********************************/
/* Menu functions which also allow variables to be set via the knob
   and selection buttons  

   Version 1.0 
   Written for MIT 6.270 contest by Anne Wright 11/14/1991 

   Version 2.0
   Converted for Handy Board for Botball by Anne Wright 1/13/2001
*/

/* abstractions for chosen_button */
#define NEITHER_B 0
#define START_B  1
#define STOP_B  2

/* abstractions for wait_button */
#define UP_B      3
#define DOWN_B    4
#define CYCLE_B   5

/*****************************button routines*************************/
/* Return minimum of two integers */
/* defined in cmucam3.ic which is loaded by this file -dpm 1/03
int min(int a,int b)
{
    if(a<b)
      return(a);
    else
      return(b);
}
*/
/* Return minimum of two floats */
float fmin(float a,float b)
{
    if(a<b)
      return(a);
    else
      return(b);
}

/* Returns which button is depressed using definitions above.  If
   both are pressed, start has precedence */
int chosen_button()
{
    if(start_button())
      return START_B;
    else if(stop_button())
      return STOP_B;
    else 
    return NEITHER_B;
}  

/* wait until button is depressed(DOWN_B), released(UP_B), or
   both(CYCLE_B) and return which button if any activated the
   sequence */

int wait_button(int i)
{
    if(i==DOWN_B){
        while(!(start_button() || stop_button()));
        return chosen_button();
    }
    else if (i==UP_B) {
        int b;
        b=chosen_button();
        while(start_button() || stop_button());
        return b;
    }
    else {
        int b;
        while(!(start_button() || stop_button()));
        b=chosen_button();
        while(start_button() || stop_button());
        return b;
    }
} 

/********************* Knob to Number routines*****************************/

/* Returns an integer value from min_val to max_val based on the current
   position of the knob */  
int knob_int_value(int min_val,int max_val)
{
    int val, coarseness=(255)/(max_val-min_val),selection;
    
    val=min((knob())/coarseness+min_val,max_val);
    return min(val,max_val);
}

/* Returns an float value from min_val to max_val based on the current
   position of the knob */  
float knob_float_value(float min_val,float max_val)
{
    float val, coarseness=(255.)/(max_val-min_val),selection;
    val=fmin(((float)knob())/coarseness+min_val,max_val);
    return fmin(val,max_val);
}

/******************** Menu selection routines ****************************/

/* While waiting for a button press, display the string passed in and
   the val, the integer value betwen min_val and max_val for the knob.
   If the button pressed is the start button, returns the final value
   of val.  If the button pressed is the stop button, returns -1.  */
int select_int_value(char s[],int min_val,int max_val)
{
    int val, button;
    
    printf("%s %d to %d\n",s,min_val, max_val);
    sleep(0.8);
    
    /* Wait until no button is pressed */
    wait_button(UP_B);
    
    /* While no button is pressed, display the string passed in and the
       current value of val */
    while((button = chosen_button())==NEITHER_B) {
        val=knob_int_value(min_val,max_val);
        printf("%s %d\n",s,val);
        msleep(100L);
    }
    
    /* Wait until no button is pressed */
    wait_button(UP_B);
    
    if(button==STOP_B)
      return(-1); /** -1 means stop pressed -- do not reset value **/
    else
      return(val); /* Stop not pressed, return val */
}

/* While waiting for a button press, display the string passed in and
   the val, the float value betwen min_val and max_val for the knob.
   If the button pressed is the start button, returns the final value
   of val.  If the button pressed is the stop button, returns -1.  */
float select_float_value(char s[],float min_val,float max_val)
{
    float val;
    int button;
    
    printf("%s %f to %f\n",s,min_val, max_val);
    sleep(0.8);
    
    /* Wait until no button is pressed */
    wait_button(UP_B);
    
    /* While no button is pressed, display the string passed in and the
       current value of val */
    while((button = chosen_button())==NEITHER_B) {
        val=knob_float_value(min_val,max_val);
        printf("%s %f\n",s,val);
        msleep(100L);
    }
    
    /* Wait until no button is pressed */
    wait_button(UP_B);
    
    if(button==STOP_B)
      return(-1.0); /** -1 means stop pressed -- do not reset value **/
    else
      return(val); /* Stop not pressed, return val */
}

/* While waiting for a button press, display the string from the array
   of strings passed in which corresponds to the current position of
   the knob (see select_int_value).  If the button pressed is the
   start button, returns the index of the string selected (0 to n-1).
   If the button pressed is the stop button, returns -1.  */
int select_string(char choices[][],int n)
{
    int selection,last_selection=-1,button;
    
    if(n>_array_size(choices))
      n=_array_size(choices);
    
    
    /* Wait until no button is pressed */
    wait_button(UP_B);
    
    /* While no button is pressed, display the string from the array
       of strings passed in which corresponds to the current position
       of the knob */
    while((button = chosen_button())==NEITHER_B) {
        selection=knob_int_value(0,n-1);
        if(selection!=last_selection) {
            printf("%s\n",choices[selection]);
            msleep(150L);
            last_selection=selection;
        }
    }
    
    /* Wait until no button is pressed */
    wait_button(UP_B);
    
    if(button==STOP_B)
      return(-1); /** -1 means stop pressed -- do not reset value **/
    else
      return(selection); /* Stop not pressed, return val */
}

/*
 * Local variables:
 *  comment-column: 40
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 */
